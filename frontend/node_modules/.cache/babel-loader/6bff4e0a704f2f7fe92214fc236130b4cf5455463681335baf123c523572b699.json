{"ast":null,"code":"var _jsxFileName = \"/Users/fellan/dev/quizProject/frontend/src/pages/Quiz.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  const url = 'https://localhost/3001';\n  const headers = new Headers();\n  headers.append('ngrok-skip-browser-warning', 'true');\n  const [questions, setQuestions] = useState(null);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\n  const [result, setResult] = useState([]);\n  const [isFinished, setIsFinished] = useState(false);\n  const [score, setScore] = useState(0);\n  const [quizAnswers, setQuizAnswers] = useState(null);\n\n  // useEffect(() => {\n  //     const fetchQuestions = async () => {\n  //         try {\n  //             const response = await fetch(url + '/getQuestions', {headers});\n  //             const data = await response.json();\n  //             return data;\n  //         } catch (error) {\n  //             console.error(error)\n  //             return null\n  //         }\n  //     }\n  //     //Anropa fetchQuestions direkt i useEffect och handle result\n  //     (async () => {\n  //         const dataQuestions = await fetchQuestions()\n  //         if (dataQuestions !== null) {\n  //             setQuestions(dataQuestions)\n  //         }\n  //     })()\n  // }, [])\n  //\n  // console.log(questions);\n  //\n  // useEffect(() => {\n  //     console.log(score)\n  // }, [score])\n  //\n  // const renderQuestion = () => {\n  //     if (activeQuestion >= questions?.length) {\n  //         return 'No more questions';\n  //     } else {\n  //         return questions[activeQuestion].question;\n  //     }\n  // }\n  //\n  // const onClickNext = () => {\n  //     if (activeQuestion <= questions?.length - 2) {\n  //         setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n  //         const nextQuestionIndex = activeQuestion + 1;\n  //\n  //         setActiveQuestion(nextQuestionIndex);\n  //         setSelectedAnswer(null);\n  //         setSelectedAnswerIndex(null);\n  //     }\n  // }\n  //\n  // //returnera correctAnswer på question\n  // const checkCorrectAnswer = (questionId, answer) => {\n  //     const question = questions.find((q) => q.id === parseInt(questionId));\n  //     if (!question) {\n  //         // Om frågan inte finns i questions-arrayen, return false\n  //         return false;\n  //     }\n  //     return question.correctAnswer === answer.trim();\n  // }\n  //\n  // const onSelectedAnswer = (answer, index) => {\n  //     setSelectedAnswer(answer);\n  //     setSelectedAnswerIndex(index);\n  //\n  //     setResult(prevResult => ({\n  //         ...prevResult,\n  //         [questions[activeQuestion].id]: {\n  //             answer: answer.trim(), //lägg till användarens val\n  //             questionId: questions[activeQuestion].id, // lägg till questionId\n  //         },\n  //     }));\n  // }\n  //\n  // const onFinishedClick = async () => {\n  //     setQuizAnswers(null)\n  //     setIsFinished(true)\n  //     try {\n  //         fetch(url + '/postQuizAnswers', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json'\n  //             },\n  //             body: JSON.stringify({\n  //                 result,\n  //             }),\n  //         })\n  //     } catch (error) {\n  //         console.log('Error:', error)\n  //     }\n  //     try {\n  //         const response = await fetch(url + '/getQuizAnswers', {headers})\n  //         const dataAnswers = await response.json()\n  //         setQuizAnswers(dataAnswers)\n  //     } catch (error) {\n  //         console.log('Error:', error)\n  //     }\n  // }\n  //\n  // // gå igenom array när result är satt\n  // const calculateScore = () => {\n  //     let correctAnswers = 0\n  //     for (const question of questions) {\n  //         console.log(question)\n  //         const questionId = question.id\n  //         const userAnswer = result[questionId]?.answer\n  //         if (userAnswer) {\n  //             const isCorrect = checkCorrectAnswer(questionId, userAnswer)\n  //             if (isCorrect) {\n  //                 correctAnswers++\n  //             }\n  //         }\n  //     }\n  //     console.log(correctAnswers)\n  //     return correctAnswers\n  // }\n  //\n  // useEffect(() => {\n  //     if (result && questions) {\n  //         const newScore = calculateScore()\n  //         setScore(newScore)\n  //     }\n  // }, [result, questions])\n\n  const quizIsFinished = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"End of quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"question\",\n          children: \"Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"score-text\",\n          children: [score, \" / 4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: quizAnswers && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"score-answers score-text\",\n            children: \"Quiz answers:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            className: \"answers-list score-text\",\n            children: quizAnswers.map(answerData => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: checkCorrectAnswer(answerData.questionId, answerData.answer) ? 'correct-answer score-text' : 'wrong-answer score-text',\n                children: answerData.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this)\n            }, answerData.questionId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display-container\",\n    children: (questions === null || questions === void 0 ? void 0 : questions.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isFinished ? quizIsFinished() : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-container\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"question\",\n            children: renderQuestion()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: questions[activeQuestion].option.split(',').map((el, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"option-container\",\n            onClick: () => onSelectedAnswer(el, index, selectedAnswer),\n            className: index === selectedAnswerIndex ? 'selected-answer' : null,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option-text\",\n              children: el\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 45\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          disabled: selectedAnswerIndex === null,\n          onClick: activeQuestion >= (questions === null || questions === void 0 ? void 0 : questions.length) - 1 ? onFinishedClick : onClickNext,\n          children: activeQuestion === (questions === null || questions === void 0 ? void 0 : questions.length) - 1 ? 'Finish' : 'Next'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_s(Quiz, \"EQnwq0eARkxTNpkl4xmB+S7xuPg=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","_s","url","headers","Headers","append","questions","setQuestions","activeQuestion","setActiveQuestion","selectedAnswer","setSelectedAnswer","selectedAnswerIndex","setSelectedAnswerIndex","result","setResult","isFinished","setIsFinished","score","setScore","quizAnswers","setQuizAnswers","quizIsFinished","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","answerData","checkCorrectAnswer","questionId","answer","length","renderQuestion","option","split","el","index","id","onClick","onSelectedAnswer","disabled","onFinishedClick","onClickNext","_c","$RefreshReg$"],"sources":["/Users/fellan/dev/quizProject/frontend/src/pages/Quiz.js"],"sourcesContent":["import {useEffect, useState} from \"react\"\n\nconst Quiz = () => {\n    const url = 'https://localhost/3001';\n    const headers = new Headers();\n    headers.append('ngrok-skip-browser-warning', 'true');\n    const [questions, setQuestions] = useState(null);\n    const [activeQuestion, setActiveQuestion] = useState(0);\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\n    const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\n    const [result, setResult] = useState([]);\n    const [isFinished, setIsFinished] = useState(false);\n    const [score, setScore] = useState(0);\n    const [quizAnswers, setQuizAnswers] = useState(null);\n\n    // useEffect(() => {\n    //     const fetchQuestions = async () => {\n    //         try {\n    //             const response = await fetch(url + '/getQuestions', {headers});\n    //             const data = await response.json();\n    //             return data;\n    //         } catch (error) {\n    //             console.error(error)\n    //             return null\n    //         }\n    //     }\n    //     //Anropa fetchQuestions direkt i useEffect och handle result\n    //     (async () => {\n    //         const dataQuestions = await fetchQuestions()\n    //         if (dataQuestions !== null) {\n    //             setQuestions(dataQuestions)\n    //         }\n    //     })()\n    // }, [])\n    //\n    // console.log(questions);\n    //\n    // useEffect(() => {\n    //     console.log(score)\n    // }, [score])\n    //\n    // const renderQuestion = () => {\n    //     if (activeQuestion >= questions?.length) {\n    //         return 'No more questions';\n    //     } else {\n    //         return questions[activeQuestion].question;\n    //     }\n    // }\n    //\n    // const onClickNext = () => {\n    //     if (activeQuestion <= questions?.length - 2) {\n    //         setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    //         const nextQuestionIndex = activeQuestion + 1;\n    //\n    //         setActiveQuestion(nextQuestionIndex);\n    //         setSelectedAnswer(null);\n    //         setSelectedAnswerIndex(null);\n    //     }\n    // }\n    //\n    // //returnera correctAnswer på question\n    // const checkCorrectAnswer = (questionId, answer) => {\n    //     const question = questions.find((q) => q.id === parseInt(questionId));\n    //     if (!question) {\n    //         // Om frågan inte finns i questions-arrayen, return false\n    //         return false;\n    //     }\n    //     return question.correctAnswer === answer.trim();\n    // }\n    //\n    // const onSelectedAnswer = (answer, index) => {\n    //     setSelectedAnswer(answer);\n    //     setSelectedAnswerIndex(index);\n    //\n    //     setResult(prevResult => ({\n    //         ...prevResult,\n    //         [questions[activeQuestion].id]: {\n    //             answer: answer.trim(), //lägg till användarens val\n    //             questionId: questions[activeQuestion].id, // lägg till questionId\n    //         },\n    //     }));\n    // }\n    //\n    // const onFinishedClick = async () => {\n    //     setQuizAnswers(null)\n    //     setIsFinished(true)\n    //     try {\n    //         fetch(url + '/postQuizAnswers', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json'\n    //             },\n    //             body: JSON.stringify({\n    //                 result,\n    //             }),\n    //         })\n    //     } catch (error) {\n    //         console.log('Error:', error)\n    //     }\n    //     try {\n    //         const response = await fetch(url + '/getQuizAnswers', {headers})\n    //         const dataAnswers = await response.json()\n    //         setQuizAnswers(dataAnswers)\n    //     } catch (error) {\n    //         console.log('Error:', error)\n    //     }\n    // }\n    //\n    // // gå igenom array när result är satt\n    // const calculateScore = () => {\n    //     let correctAnswers = 0\n    //     for (const question of questions) {\n    //         console.log(question)\n    //         const questionId = question.id\n    //         const userAnswer = result[questionId]?.answer\n    //         if (userAnswer) {\n    //             const isCorrect = checkCorrectAnswer(questionId, userAnswer)\n    //             if (isCorrect) {\n    //                 correctAnswers++\n    //             }\n    //         }\n    //     }\n    //     console.log(correctAnswers)\n    //     return correctAnswers\n    // }\n    //\n    // useEffect(() => {\n    //     if (result && questions) {\n    //         const newScore = calculateScore()\n    //         setScore(newScore)\n    //     }\n    // }, [result, questions])\n\n\n    const quizIsFinished = () => {\n        return (\n            <>\n                <div className=\"header\">\n                    <h4>End of quiz</h4>\n                </div>\n                <div className=\"question-container\">\n                    <span className=\"question\">Score</span>\n                    <p className='score-text'>{score} / 4</p>\n                </div>\n                <div>\n                    {quizAnswers && (\n                        <div>\n                            <h5 className='score-answers score-text'>Quiz answers:</h5>\n                            <ol className='answers-list score-text'>\n                                {quizAnswers.map((answerData) => (\n                                    <li key={answerData.questionId}>\n                                        <p className={checkCorrectAnswer(answerData.questionId, answerData.answer) ?\n                                            'correct-answer score-text' : 'wrong-answer score-text'}>\n                                            {answerData.answer}\n                                        </p>\n                                    </li>\n                                ))}\n                            </ol>\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <div className=\"display-container\">\n            {questions?.length > 0 &&\n                <div>\n                    {isFinished ? quizIsFinished() : (\n                        <>\n                            <div className=\"header\">\n                                <div>\n                                    <h4>Quiz</h4>\n                                </div>\n                            </div>\n                            <div className=\"question-container\">\n                                <span className=\"question\">{renderQuestion()}</span>\n                            </div>\n                            <div className=\"container\">\n                                {\n                                    questions[activeQuestion].option.split(',').map((el, index) => (\n                                        <div id=\"option-container\"\n                                             onClick={() => onSelectedAnswer(el, index, selectedAnswer)}\n                                             className={index === selectedAnswerIndex ? 'selected-answer' : null}\n                                             key={index}>\n                                            <div className='option-text'>\n                                                {el}\n                                            </div>\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                            <button className=\"next-button\" disabled={selectedAnswerIndex === null}\n                                    onClick={activeQuestion >= questions?.length - 1 ? onFinishedClick : onClickNext}>{activeQuestion === questions?.length - 1 ? 'Finish' : 'Next'}\n                            </button>\n                        </>\n                    )}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Quiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}