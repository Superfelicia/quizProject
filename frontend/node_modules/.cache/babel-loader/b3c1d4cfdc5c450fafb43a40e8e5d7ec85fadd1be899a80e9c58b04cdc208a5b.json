{"ast":null,"code":"var _jsxFileName = \"/Users/fellan/dev/quizProject/frontend/src/pages/Quiz.js\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  const url = 'https://localhost/3001';\n  const headers = new Headers();\n  headers.append('ngrok-skip-browser-warning', 'true');\n  // const [questions, setQuestions] = useState(null);\n  // const [activeQuestion, setActiveQuestion] = useState(0);\n  // const [selectedAnswer, setSelectedAnswer] = useState(null);\n  // const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\n  // const [result, setResult] = useState([]);\n  // const [isFinished, setIsFinished] = useState(false);\n  // const [score, setScore] = useState(0);\n  // const [quizAnswers, setQuizAnswers] = useState(null);\n\n  // useEffect(() => {\n  //     const fetchQuestions = async () => {\n  //         try {\n  //             const response = await fetch(url + '/getQuestions', {headers});\n  //             const data = await response.json();\n  //             return data;\n  //         } catch (error) {\n  //             console.error(error)\n  //             return null\n  //         }\n  //     }\n  //     //Anropa fetchQuestions direkt i useEffect och handle result\n  //     (async () => {\n  //         const dataQuestions = await fetchQuestions()\n  //         if (dataQuestions !== null) {\n  //             setQuestions(dataQuestions)\n  //         }\n  //     })()\n  // }, [])\n  //\n  // console.log(questions);\n  //\n  // useEffect(() => {\n  //     console.log(score)\n  // }, [score])\n  //\n  // const renderQuestion = () => {\n  //     if (activeQuestion >= questions?.length) {\n  //         return 'No more questions';\n  //     } else {\n  //         return questions[activeQuestion].question;\n  //     }\n  // }\n  //\n  // const onClickNext = () => {\n  //     if (activeQuestion <= questions?.length - 2) {\n  //         setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n  //         const nextQuestionIndex = activeQuestion + 1;\n  //\n  //         setActiveQuestion(nextQuestionIndex);\n  //         setSelectedAnswer(null);\n  //         setSelectedAnswerIndex(null);\n  //     }\n  // }\n  //\n  // //returnera correctAnswer på question\n  // const checkCorrectAnswer = (questionId, answer) => {\n  //     const question = questions.find((q) => q.id === parseInt(questionId));\n  //     if (!question) {\n  //         // Om frågan inte finns i questions-arrayen, return false\n  //         return false;\n  //     }\n  //     return question.correctAnswer === answer.trim();\n  // }\n  //\n  // const onSelectedAnswer = (answer, index) => {\n  //     setSelectedAnswer(answer);\n  //     setSelectedAnswerIndex(index);\n  //\n  //     setResult(prevResult => ({\n  //         ...prevResult,\n  //         [questions[activeQuestion].id]: {\n  //             answer: answer.trim(), //lägg till användarens val\n  //             questionId: questions[activeQuestion].id, // lägg till questionId\n  //         },\n  //     }));\n  // }\n  //\n  // const onFinishedClick = async () => {\n  //     setQuizAnswers(null)\n  //     setIsFinished(true)\n  //     try {\n  //         fetch(url + '/postQuizAnswers', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json'\n  //             },\n  //             body: JSON.stringify({\n  //                 result,\n  //             }),\n  //         })\n  //     } catch (error) {\n  //         console.log('Error:', error)\n  //     }\n  //     try {\n  //         const response = await fetch(url + '/getQuizAnswers', {headers})\n  //         const dataAnswers = await response.json()\n  //         setQuizAnswers(dataAnswers)\n  //     } catch (error) {\n  //         console.log('Error:', error)\n  //     }\n  // }\n  //\n  // // gå igenom array när result är satt\n  // const calculateScore = () => {\n  //     let correctAnswers = 0\n  //     for (const question of questions) {\n  //         console.log(question)\n  //         const questionId = question.id\n  //         const userAnswer = result[questionId]?.answer\n  //         if (userAnswer) {\n  //             const isCorrect = checkCorrectAnswer(questionId, userAnswer)\n  //             if (isCorrect) {\n  //                 correctAnswers++\n  //             }\n  //         }\n  //     }\n  //     console.log(correctAnswers)\n  //     return correctAnswers\n  // }\n  //\n  // useEffect(() => {\n  //     if (result && questions) {\n  //         const newScore = calculateScore()\n  //         setScore(newScore)\n  //     }\n  // }, [result, questions])\n\n  const quizIsFinished = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"End of quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"question\",\n          children: \"Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"score-text\",\n          children: [score, \" / 4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: quizAnswers && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"score-answers score-text\",\n            children: \"Quiz answers:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            className: \"answers-list score-text\",\n            children: quizAnswers.map(answerData => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: checkCorrectAnswer(answerData.questionId, answerData.answer) ? 'correct-answer score-text' : 'wrong-answer score-text',\n                children: answerData.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this)\n            }, answerData.questionId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","url","headers","Headers","append","quizIsFinished","children","className","fileName","_jsxFileName","lineNumber","columnNumber","score","quizAnswers","map","answerData","checkCorrectAnswer","questionId","answer","_c","$RefreshReg$"],"sources":["/Users/fellan/dev/quizProject/frontend/src/pages/Quiz.js"],"sourcesContent":["import {useEffect, useState} from \"react\"\n\nconst Quiz = () => {\n    const url = 'https://localhost/3001';\n    const headers = new Headers();\n    headers.append('ngrok-skip-browser-warning', 'true');\n    // const [questions, setQuestions] = useState(null);\n    // const [activeQuestion, setActiveQuestion] = useState(0);\n    // const [selectedAnswer, setSelectedAnswer] = useState(null);\n    // const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\n    // const [result, setResult] = useState([]);\n    // const [isFinished, setIsFinished] = useState(false);\n    // const [score, setScore] = useState(0);\n    // const [quizAnswers, setQuizAnswers] = useState(null);\n\n    // useEffect(() => {\n    //     const fetchQuestions = async () => {\n    //         try {\n    //             const response = await fetch(url + '/getQuestions', {headers});\n    //             const data = await response.json();\n    //             return data;\n    //         } catch (error) {\n    //             console.error(error)\n    //             return null\n    //         }\n    //     }\n    //     //Anropa fetchQuestions direkt i useEffect och handle result\n    //     (async () => {\n    //         const dataQuestions = await fetchQuestions()\n    //         if (dataQuestions !== null) {\n    //             setQuestions(dataQuestions)\n    //         }\n    //     })()\n    // }, [])\n    //\n    // console.log(questions);\n    //\n    // useEffect(() => {\n    //     console.log(score)\n    // }, [score])\n    //\n    // const renderQuestion = () => {\n    //     if (activeQuestion >= questions?.length) {\n    //         return 'No more questions';\n    //     } else {\n    //         return questions[activeQuestion].question;\n    //     }\n    // }\n    //\n    // const onClickNext = () => {\n    //     if (activeQuestion <= questions?.length - 2) {\n    //         setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    //         const nextQuestionIndex = activeQuestion + 1;\n    //\n    //         setActiveQuestion(nextQuestionIndex);\n    //         setSelectedAnswer(null);\n    //         setSelectedAnswerIndex(null);\n    //     }\n    // }\n    //\n    // //returnera correctAnswer på question\n    // const checkCorrectAnswer = (questionId, answer) => {\n    //     const question = questions.find((q) => q.id === parseInt(questionId));\n    //     if (!question) {\n    //         // Om frågan inte finns i questions-arrayen, return false\n    //         return false;\n    //     }\n    //     return question.correctAnswer === answer.trim();\n    // }\n    //\n    // const onSelectedAnswer = (answer, index) => {\n    //     setSelectedAnswer(answer);\n    //     setSelectedAnswerIndex(index);\n    //\n    //     setResult(prevResult => ({\n    //         ...prevResult,\n    //         [questions[activeQuestion].id]: {\n    //             answer: answer.trim(), //lägg till användarens val\n    //             questionId: questions[activeQuestion].id, // lägg till questionId\n    //         },\n    //     }));\n    // }\n    //\n    // const onFinishedClick = async () => {\n    //     setQuizAnswers(null)\n    //     setIsFinished(true)\n    //     try {\n    //         fetch(url + '/postQuizAnswers', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json'\n    //             },\n    //             body: JSON.stringify({\n    //                 result,\n    //             }),\n    //         })\n    //     } catch (error) {\n    //         console.log('Error:', error)\n    //     }\n    //     try {\n    //         const response = await fetch(url + '/getQuizAnswers', {headers})\n    //         const dataAnswers = await response.json()\n    //         setQuizAnswers(dataAnswers)\n    //     } catch (error) {\n    //         console.log('Error:', error)\n    //     }\n    // }\n    //\n    // // gå igenom array när result är satt\n    // const calculateScore = () => {\n    //     let correctAnswers = 0\n    //     for (const question of questions) {\n    //         console.log(question)\n    //         const questionId = question.id\n    //         const userAnswer = result[questionId]?.answer\n    //         if (userAnswer) {\n    //             const isCorrect = checkCorrectAnswer(questionId, userAnswer)\n    //             if (isCorrect) {\n    //                 correctAnswers++\n    //             }\n    //         }\n    //     }\n    //     console.log(correctAnswers)\n    //     return correctAnswers\n    // }\n    //\n    // useEffect(() => {\n    //     if (result && questions) {\n    //         const newScore = calculateScore()\n    //         setScore(newScore)\n    //     }\n    // }, [result, questions])\n\n\n    const quizIsFinished = () => {\n        return (\n            <>\n                <div className=\"header\">\n                    <h4>End of quiz</h4>\n                </div>\n                <div className=\"question-container\">\n                    <span className=\"question\">Score</span>\n                    <p className='score-text'>{score} / 4</p>\n                </div>\n                <div>\n                    {quizAnswers && (\n                        <div>\n                            <h5 className='score-answers score-text'>Quiz answers:</h5>\n                            <ol className='answers-list score-text'>\n                                {quizAnswers.map((answerData) => (\n                                    <li key={answerData.questionId}>\n                                        <p className={checkCorrectAnswer(answerData.questionId, answerData.answer) ?\n                                            'correct-answer score-text' : 'wrong-answer score-text'}>\n                                            {answerData.answer}\n                                        </p>\n                                    </li>\n                                ))}\n                            </ol>\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n\n    return (\n        <div className=\"display-container\">\n            {/*{questions?.length > 0 &&*/}\n            {/*    <div>*/}\n            {/*        {isFinished ? quizIsFinished() : (*/}\n            {/*            <>*/}\n            {/*                <div className=\"header\">*/}\n            {/*                    <div>*/}\n            {/*                        <h4>Quiz</h4>*/}\n            {/*                    </div>*/}\n            {/*                </div>*/}\n            {/*                <div className=\"question-container\">*/}\n            {/*                    <span className=\"question\">{renderQuestion()}</span>*/}\n            {/*                </div>*/}\n            {/*                <div className=\"container\">*/}\n            {/*                    {*/}\n            {/*                        questions[activeQuestion].option.split(',').map((el, index) => (*/}\n            {/*                            <div id=\"option-container\"*/}\n            {/*                                 onClick={() => onSelectedAnswer(el, index, selectedAnswer)}*/}\n            {/*                                 className={index === selectedAnswerIndex ? 'selected-answer' : null}*/}\n            {/*                                 key={index}>*/}\n            {/*                                <div className='option-text'>*/}\n            {/*                                    {el}*/}\n            {/*                                </div>*/}\n            {/*                            </div>*/}\n            {/*                        ))*/}\n            {/*                    }*/}\n            {/*                </div>*/}\n            {/*                <button className=\"next-button\" disabled={selectedAnswerIndex === null}*/}\n            {/*                        onClick={activeQuestion >= questions?.length - 1 ? onFinishedClick : onClickNext}>{activeQuestion === questions?.length - 1 ? 'Finish' : 'Next'}*/}\n            {/*                </button>*/}\n            {/*            </>*/}\n            {/*        )}*/}\n            {/*    </div>*/}\n            {/*}*/}\n        </div>\n    )\n}\n\nexport default Quiz;\n"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACf,MAAMC,GAAG,GAAG,wBAAwB;EACpC,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7BD,OAAO,CAACE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC;EACpcAAc,GAAGA,CAAA,KAAM;IACzB,oBACIR,OAAA,CAAAE,SAAA;MAAAO,QAAA,gBACIT,OAAA;QAAKU,SAAS,EAAC,QAAQ;QAAAD,QAAA,eACnBT,OAAA;UAAAS,QAAA,EAAI;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACNd,OAAA;QAAKU,SAAS,EAAC,oBAAoB;QAAAD,QAAA,gBAC/BT,OAAA;UAAMU,SAAS,EAAC,UAAU;UAAAD,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACvCd,OAAA;UAAGU,SAAS,EAAC,YAAY;UAAAD,QAAA,GAAEM,KAAK,EAAC,MAAI;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACNd,OAAA;QAAAS,QAAA,EACKO,WAAW,iBACRhB,OAAA;UAAAS,QAAA,gBACIT,OAAA;YAAIU,SAAS,EAAC,0BAA0B;YAAAD,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3Dd,OAAA;YAAIU,SAAS,EAAC,yBAAyB;YAAAD,QAAA,EAClCO,WAAW,CAACC,GAAG,CAAEC,UAAU,iBACxBlB,OAAA;cAAAS,QAAA,eACIT,OAAA;gBAAGU,SAAS,EAAES,kBAAkB,CAACD,UAAU,CAACE,UAAU,EAAEF,UAAU,CAACG,MAAM,CAAC,GACtE,2BAA2B,GAAG,yBAA0B;gBAAAZ,QAAA,EACvDS,UAAU,CAACG;cAAM;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnB;YAAC,GAJCI,UAAU,CAACE,UAAU;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAK1B,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MACR;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA,eACR,CAAC;EAEX,CAAC;EAED,oBACId,OAAA;IAAKU,SAAS,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAkC7B,CAAC;AAEd,CAAC;AAAAQ,EAAA,GAxMKnB,IAAI;AA0MV,eAAeA,IAAI;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}